"""Vulnerability template and category models."""

from sqlalchemy import (
    Column, String, Integer, Text, JSON, Boolean, DateTime,
    ForeignKey, Enum as SQLEnum, Index, UniqueConstraint
)
from sqlalchemy.orm import relationship
from sqlalchemy.sql import func
import uuid

from backend.core.database import Base
from backend.scanner.base_module import SeverityLevel

class VulnerabilityCategory(Base):
    """Vulnerability categories for organization."""
    __tablename__ = "vulnerability_categories"
    
    id = Column(String(36), primary_key=True, default=lambda: str(uuid.uuid4()))
    name = Column(String(100), unique=True, nullable=False)
    description = Column(Text)
    parent_id = Column(String(36), ForeignKey('vulnerability_categories.id'))
    
    # OWASP mapping
    owasp_category = Column(String(50))
    
    # Metadata
    created_at = Column(DateTime(timezone=True), server_default=func.now())
    updated_at = Column(DateTime(timezone=True), onupdate=func.now())
    
    # Relationships
    templates = relationship("VulnerabilityTemplate", back_populates="category")
    
    def to_dict(self):
        """Convert to dictionary."""
        return {
            'id': self.id,
            'name': self.name,
            'description': self.description,
            'parent_id': self.parent_id,
            'owasp_category': self.owasp_category,
            'created_at': self.created_at.isoformat() if self.created_at else None,
            'updated_at': self.updated_at.isoformat() if self.updated_at else None
        }

class VulnerabilityTemplate(Base):
    """Templates for known vulnerabilities."""
    __tablename__ = "vulnerability_templates"
    
    # Primary key
    id = Column(String(36), primary_key=True, default=lambda: str(uuid.uuid4()))
    
    # Basic information
    name = Column(String(500), nullable=False, index=True)
    description = Column(Text)
    technical_details = Column(Text)
    
    # Classification
    category_id = Column(String(36), ForeignKey('vulnerability_categories.id'))
    severity = Column(SQLEnum(SeverityLevel), nullable=False)
    
    # Identifiers
    cve_ids = Column(JSON, default=[])
    cwe_ids = Column(JSON, default=[])
    capec_ids = Column(JSON, default=[])  # Common Attack Pattern Enumeration
    
    # Detection
    detection_methods = Column(JSON, default=[])
    false_positive_indicators = Column(JSON, default=[])
    
    # Impact
    impact = Column(Text)
    likelihood = Column(String(20))  # low, medium, high
    
    # Remediation
    remediation = Column(Text)
    remediation_effort = Column(String(20))  # low, medium, high
    remediation_references = Column(JSON, default=[])
    
    # Testing
    test_cases = Column(JSON, default=[])
    proof_of_concept = Column(Text)
    
    # References
    references = Column(JSON, default=[])
    
    # Metadata
    tags = Column(JSON, default=[])
    created_at = Column(DateTime(timezone=True), server_default=func.now())
    updated_at = Column(DateTime(timezone=True), onupdate=func.now())
    is_active = Column(Boolean, default=True)
    
    # Relationships
    category = relationship("VulnerabilityCategory", back_populates="templates")
    
    # Indexes
    __table_args__ = (
        Index('idx_template_category_severity', 'category_id', 'severity'),
        Index('idx_template_cwe', 'cwe_ids'),
    )
    
    def to_dict(self):
        """Convert to dictionary."""
        return {
            'id': self.id,
            'name': self.name,
            'description': self.description,
            'technical_details': self.technical_details,
            'category_id': self.category_id,
            'severity': self.severity.value if self.severity else None,
            'cve_ids': self.cve_ids,
            'cwe_ids': self.cwe_ids,
            'capec_ids': self.capec_ids,
            'detection_methods': self.detection_methods,
            'false_positive_indicators': self.false_positive_indicators,
            'impact': self.impact,
            'likelihood': self.likelihood,
            'remediation': self.remediation,
            'remediation_effort': self.remediation_effort,
            'remediation_references': self.remediation_references,
            'test_cases': self.test_cases,
            'proof_of_concept': self.proof_of_concept,
            'references': self.references,
            'tags': self.tags,
            'is_active': self.is_active,
            'created_at': self.created_at.isoformat() if self.created_at else None,
            'updated_at': self.updated_at.isoformat() if self.updated_at else None
        }

# Pre-populate common vulnerability categories
DEFAULT_CATEGORIES = [
    {
        'name': 'Injection',
        'description': 'Injection flaws, such as SQL, NoSQL, OS, and LDAP injection',
        'owasp_category': 'A03:2021'
    },
    {
        'name': 'Broken Authentication',
        'description': 'Authentication and session management flaws',
        'owasp_category': 'A07:2021'
    },
    {
        'name': 'Sensitive Data Exposure',
        'description': 'Exposure of sensitive data to unauthorized actors',
        'owasp_category': 'A02:2021'
    },
    {
        'name': 'XML External Entities (XXE)',
        'description': 'XML processors evaluate external entity references',
        'owasp_category': 'A05:2021'
    },
    {
        'name': 'Broken Access Control',
        'description': 'Restrictions on authenticated users are not properly enforced',
        'owasp_category': 'A01:2021'
    },
    {
        'name': 'Security Misconfiguration',
        'description': 'Insecure default configurations, incomplete configurations',
        'owasp_category': 'A05:2021'
    },
    {
        'name': 'Cross-Site Scripting (XSS)',
        'description': 'XSS flaws occur when untrusted data is included in web pages',
        'owasp_category': 'A03:2021'
    },
    {
        'name': 'Insecure Deserialization',
        'description': 'Deserialization of untrusted data',
        'owasp_category': 'A08:2021'
    },
    {
        'name': 'Using Components with Known Vulnerabilities',
        'description': 'Libraries, frameworks with known vulnerabilities',
        'owasp_category': 'A06:2021'
    },
    {
        'name': 'Insufficient Logging & Monitoring',
        'description': 'Insufficient logging and monitoring capabilities',
        'owasp_category': 'A09:2021'
    },
    {
        'name': 'Server-Side Request Forgery (SSRF)',
        'description': 'Web application fetches remote resources without validating user input',
        'owasp_category': 'A10:2021'
    },
    {
        'name': 'Cryptographic Failures',
        'description': 'Failures related to cryptography or lack thereof',
        'owasp_category': 'A02:2021'
    },
    {
        'name': 'Insecure Design',
        'description': 'Missing or ineffective control design',
        'owasp_category': 'A04:2021'
    },
    {
        'name': 'Software and Data Integrity Failures',
        'description': 'Code and infrastructure that does not protect against integrity violations',
        'owasp_category': 'A08:2021'
    }
]
